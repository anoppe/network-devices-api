import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.38"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

//apply plugin: ''
apply plugin: 'java'
apply plugin: 'jp.classmethod.aws'              // Gradle tasks for AWS stuff
apply plugin: 'jp.classmethod.aws.lambda'       // Gradle tasks for deploying and running lambda's
apply plugin: 'com.github.johnrengelman.shadow' // To create a fatjar which can be uploaded to AWS

group 'nl.noppe'
version '1.0'
sourceCompatibility = 1.8

aws {
    profileName = 'anoppe'
    region = 'eu-west-1'
}

lambda {
    region = "eu-west-1"
}

shadowJar {
    baseName = 'network-device-api'
    classifier = null
    version = project.version
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version:'1.2.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version:'1.11.6'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sns', version:'1.11.534'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version:'1.0.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version:'2.1.0'
    implementation group: 'com.github.pengrad', name: 'java-telegram-bot-api', version:'4.1.1'
    runtime group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Task to deploy the code to AWS
task deployHandleDhcpEventsFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    functionName = "handleDhcpEvent"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/handleDhcpEventLambdaRole"

    zipFile = shadowJar.archivePath
    handler = "nl.noppe.network.dhcp.DhcpEventHandler::handleRequest"
    memorySize = 512
    timeout = 20

}

// Task to deploy the code to AWS
task deployReadDhcpEventsFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    functionName = "readDhcpEvent"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/handleDhcpEventLambdaRole"

    zipFile = shadowJar.archivePath
    handler = "nl.noppe.network.dhcp.DhcpEventHandler::getEventsForDevice"
    memorySize = 512
    timeout = 20

}
// Task to deploy the code to AWS
task deployMigrateDhcpEventsFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    functionName = "migrate-dhcp-events"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/handleDhcpEventLambdaRole"

    zipFile = shadowJar.archivePath
    handler = "nl.noppe.network.dhcp.DhcpEventMigrator::migrateDhcpEvents"
    memorySize = 512
    timeout = 20

}

// Task to deploy the code to AWS
task deployReadNetworkDevicesFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    functionName = "read-network-devices"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/readNetworkDevicesLambdaRole"

    zipFile = shadowJar.archivePath
    handler = "nl.noppe.network.device.ListDeviceService::getDevices"
    memorySize = 512
    timeout = 20

}

// Task to deploy the code to AWS
task deployReadDevicesByMacFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [shadowJar, test]) {
    functionName = "read-network-device-by-mac"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/readNetworkDevicesLambdaRole"

    zipFile = shadowJar.archivePath
    handler = "nl.noppe.network.device.ListDeviceService::getDeviceByMac"
    memorySize = 512
    timeout = 20

}
